<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <context:annotation-config/>

    <import resource="classpath*:jsqltuner-services-context.xml"/>
    <import resource="jsqltuner-datasources-context.xml"/>


    <aop:config/>
    <aop:aspectj-autoproxy/>

    <bean class="java.lang.String">
        <qualifier value="jsqltunerIgnoreSchema"/>
        <constructor-arg value="JSQLTUNER"/>
    </bean>

    <bean class="java.lang.String">
        <qualifier value="jsqltunerIgnoreSchema"/>
        <constructor-arg value="jsqltuner"/>
    </bean>

    <context:component-scan base-package="pl.piotrsukiennik.tuner.statement"/>
    <context:component-scan base-package="pl.piotrsukiennik.tuner.ai"/>
    <context:component-scan base-package="pl.piotrsukiennik.tuner.utils"/>


    <!-- QueryAdvisors -->

    <bean class="pl.piotrsukiennik.tuner.statement.advisor.ReadQueryAdvisorBuilder">
        <qualifier value="readQueryAdvisorBuilder"/>
        <property name="expression" value="execution (java.sql.ResultSet java.sql.PreparedStatement.*(..))"/>
        <property name="order" value="1"/>
    </bean>

    <bean class="pl.piotrsukiennik.tuner.statement.advisor.WriteQueryAdvisorBuilder">
        <qualifier value="writeQueryAdvisorBuilder"/>
        <property name="expression" value="execution (int java.sql.PreparedStatement.executeUpdate())"/>
        <property name="order" value="2"/>
    </bean>

    <!-- !QueryAdvisors -->


    <!-- StatementsAdvisors -->

    <bean id="statementsInterceptingAdvisor" class="org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">
        <qualifier value="connectionQualifier"/>
        <property name="expression" value="execution (java.sql.PreparedStatement java.sql.Connection.*(..))"/>
        <property name="advice" ref="statementInterceptingAdvice"/>
        <property name="order" value="1"/>
    </bean>


    <bean id="statementsRegisteringAdvisor" class="org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">
        <qualifier value="connectionQualifier"/>
        <property name="expression" value="execution (java.sql.* java.sql.Connection.*(..))"/>
        <property name="advice" ref="statementsRegisteringAdvice"/>
        <property name="order" value="100"/>
    </bean>

    <bean id="statementsDeregisteringAdvisor" class="org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">
        <qualifier value="connectionQualifier"/>
        <property name="expression" value="execution (* java.sql.Connection.close(..))"/>
        <property name="advice" ref="statementsDeregisteringAdvice"/>
        <property name="order" value="10"/>
    </bean>


    <!-- !StatementsAdvisors -->

</beans>
