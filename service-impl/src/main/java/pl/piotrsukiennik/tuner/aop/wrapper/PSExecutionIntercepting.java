package pl.piotrsukiennik.tuner.aop.wrapper;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import pl.piotrsukiennik.tuner.DataSource;
import pl.piotrsukiennik.tuner.ShardService;
import pl.piotrsukiennik.tuner.datasource.InterceptorDataSource;
import pl.piotrsukiennik.tuner.exception.QueryParsingNotSupportedException;
import pl.piotrsukiennik.tuner.model.query.Query;
import pl.piotrsukiennik.tuner.model.query.ReadQuery;
import pl.piotrsukiennik.tuner.model.query.WriteQuery;
import pl.piotrsukiennik.tuner.service.ParserService;
import pl.piotrsukiennik.tuner.util.Statements;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * @author Piotr Sukiennik
 * @date 15.02.14
 */
public class PSExecutionIntercepting<T extends PSParametersIntercepting<?>> extends PSWrapper<T> {

    private static final Log LOG = LogFactory.getLog( PSExecutionIntercepting.class );

    private static final String PARSER_ERROR_FORMAT = "Query \"%s\" is not supported by parser - returning default execution PreparedStatement.%s()";

    private static final String PARSER_WRITE_ERROR_FORMAT = "Query \"%s\" is not supported by parser - ignored.";

    protected ShardService shardService;

    protected ParserService parserService;

    protected String database;

    protected String schema;

    protected String sql;

    public PSExecutionIntercepting( T preparedStatement, ShardService shardService, ParserService parserService, String database, String schema, String sql ) {
        super( preparedStatement );
        this.shardService = shardService;
        this.parserService = parserService;
        this.database = database;
        this.schema = schema;
        this.sql = sql;
    }

    protected <T extends Query> T getQuery( String sql ) throws QueryParsingNotSupportedException {
        String sqlQueryWithParams = Statements.bind( sql, preparedStatement.getParameterSet() );
        return (T) parserService.parse( database, schema, sqlQueryWithParams );
    }

    //WRITE EXECUTIONS
    @Override
    public int[] executeBatch() throws SQLException {
        return super.executeBatch();
    }


    @Override
    public boolean execute( String sql, String[] columnNames ) throws SQLException {
        boolean rowsAffected = super.execute( sql, columnNames );
        try {
            WriteQuery query = parserService.parse( database, schema, sql );
            WrapperUtil.proceed( shardService, query, rowsAffected );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
        }
        return rowsAffected;
    }


    @Override
    public int executeUpdate( String sql, int autoGeneratedKeys ) throws SQLException {
        int rowsAffected = super.executeUpdate( sql, autoGeneratedKeys );
        try {
            WriteQuery query = parserService.parse( database, schema, sql );
            WrapperUtil.proceed( shardService, query, rowsAffected );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
        }
        return rowsAffected;
    }

    @Override
    public int executeUpdate( String sql, int[] columnIndexes ) throws SQLException {
        int rowsAffected = super.executeUpdate( sql, columnIndexes );
        try {
            WriteQuery query = parserService.parse( database, schema, sql );
            WrapperUtil.proceed( shardService, query, rowsAffected );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
        }
        return rowsAffected;
    }

    @Override
    public int executeUpdate( String sql, String[] columnNames ) throws SQLException {
        int rowsAffected = super.executeUpdate( sql, columnNames );
        try {
            WriteQuery query = parserService.parse( database, schema, sql );
            WrapperUtil.proceed( shardService, query, rowsAffected );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
        }
        return rowsAffected;
    }

    @Override
    public boolean execute( String sql, int autoGeneratedKeys ) throws SQLException {
        boolean affected = super.execute( sql, autoGeneratedKeys );
        try {
            WriteQuery query = parserService.parse( database, schema, sql );
            WrapperUtil.proceed( shardService, query, affected );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
        }
        return affected;
    }

    @Override
    public boolean execute( String sql, int[] columnIndexes ) throws SQLException {
        boolean affected = super.execute( sql, columnIndexes );
        try {
            WriteQuery query = parserService.parse( database, schema, sql );
            WrapperUtil.proceed( shardService, query, affected );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
        }
        return affected;
    }

    @Override
    public int executeUpdate() throws SQLException {
        int affected = super.executeUpdate();
        try {
            WriteQuery query = parserService.parse( database, schema, sql );
            WrapperUtil.proceed( shardService, query, affected );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
        }
        return affected;
    }

    @Override
    public boolean execute( String sql ) throws SQLException {
        boolean affected = super.execute( sql );
        try {
            WriteQuery query = parserService.parse( database, schema, sql );
            WrapperUtil.proceed( shardService, query, affected );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
        }
        return affected;
    }


    @Override
    public int executeUpdate( String sql ) throws SQLException {
        int affected = super.executeUpdate( sql );
        try {
            WriteQuery query = parserService.parse( database, schema, sql );
            WrapperUtil.proceed( shardService, query, affected );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
        }
        return affected;
    }

    @Override
    public boolean execute() throws SQLException {
        boolean affected = super.execute();
        try {
            WriteQuery query = parserService.parse( database, schema, sql );
            WrapperUtil.proceed( shardService, query, affected );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
        }
        return affected;

    }
    //!WRITE EXECUTIONS

    //READ EXECUTIONS
    @Override
    public ResultSet executeQuery( final String sql ) throws SQLException {
        try {
            ReadQuery readQuery = getQuery( sql );
            DataSource rootDs = new InterceptorDataSource( this, readQuery ) {
                @Override
                protected ResultSet proceed() throws SQLException {
                    return PSExecutionIntercepting.super.executeQuery( sql );
                }
            };
            return WrapperUtil.getResultSet( shardService, readQuery, rootDs );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
            return super.executeQuery( sql );
        }
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        try {
            ReadQuery readQuery = getQuery( sql );
            DataSource rootDs = new InterceptorDataSource( this, readQuery ) {
                @Override
                protected ResultSet proceed() throws SQLException {
                    return PSExecutionIntercepting.super.executeQuery();
                }
            };
            return WrapperUtil.getResultSet( shardService, readQuery, rootDs );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
            return super.executeQuery();
        }
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        try {
            ReadQuery readQuery = getQuery( sql );
            DataSource rootDs = new InterceptorDataSource( this, readQuery ) {
                @Override
                protected ResultSet proceed() throws SQLException {
                    return PSExecutionIntercepting.super.getResultSet();
                }
            };
            return WrapperUtil.getResultSet( shardService, readQuery, rootDs );
        }
        catch ( QueryParsingNotSupportedException e ) {
            WrapperUtil.log( LOG, e, sql );
            return super.getResultSet();
        }

    }
    //!READ EXECUTIONS


}
